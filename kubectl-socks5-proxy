#!/usr/bin/env bash
#
# A kubectl plugin that creates a local SOCKS5 proxy through which you can access to pods/services in a Kubernetes cluster
#

usage(){
  echo "Usage: "
  echo "  $(basename "$0") [options]"
  echo ""
  cat << EOF
Options:
  -c, --context NAMESPACE        Kubernetes context to create SOCKS5 proxy server in
                                 Default: Current context

  -n, --namespace NAMESPACE      Namespace to create SOCKS5 proxy server in
                                 Default: Current namespace (or default)

  -a, --address ADDRESS          Address to bind to for the port-forward
                                 Default: ${DEFAULT_ADDRESS}

  -p, --port  PORT               Local port to be forwarded to the SOCKS5 proxy server (Pod)
                                 A client connects to this port, then the connection is forwarded to the
                                 SOCKS5 proxy server, which is then forwareded to the destination server
                                 Default: ${DEFAULT_PORT}

  -P, --pod-port PORT            Remote port of the socks5 proxy running in the pod.
                                 The local port (-p <local port>) gets forwarded to pod:<pod port>
                                 Default: ${DEFAULT_POD_PORT}

  -N, --name NAME                Name to give the pod in the cluster
                                 Default: ${DEFAULT_PODNAME}

  -i, --image IMAGE              Set the image used as SOCKS5 proxy server
                                 Default: ${DEFAULT_IMAGE}

  -I, --image-pull-secret SECRET Set the image used as SOCKS5 proxy server
                                 Default: ${DEFAULT_IMAGE}

  --restart                      Automatically restart the proxy on failure
                                 Default: SOCKS5 proxy only get started once

  --skip-cleanup                 Skip cleanup of the SOCKS5 proxy pod
                                 Default: Delete SOCKS5 proxy pod at the end

  -h, --help                     Show this message
EOF
}

random_string() {
  local length=${1:-10}
  sed 's/[-]//g' /proc/sys/kernel/random/uuid | head -c "$length"
  echo
}

cleanup_proxy(){
  local context="$1" namespace="$2" podname="$3"
  echo "Cleaning up SOCKS5 proxy server (Pod)..."
  kubectl --context "$context" delete pod "${podname}" --namespace "${namespace}"
}

start_proxy_pod(){
  local context="$1"
  local namespace="$2"
  local address="$3"
  local port="$4"
  local image="$5"
  local image_pull_secret="$6"
  local podname="$7"
  local podport="${8:1080}"

  local labels="owner=${USER},purpose=debug,app=socks5-proxy"

  echo "Creating SOCKS5 Proxy (Pod)..."

  # Delete previous pods
  kubectl --context "$context" --namespace "$namespace" delete pod -l "$labels" --wait=false

  # Clean up on exit
  # shellcheck disable=2064
  trap "kubectl --context '$context' delete pod -n '$namespace' '$podname' --wait=false >&2" EXIT

  local extra_args1=()
  case "$image" in
    dreamacro/clash)
      # Override command if using clash
      # By default clash only listens on localhost:7890
      # We need to listen on all interfaces and change the port
      extra_args1=(--command -- sh -c
        'echo -e "mixed-port: 1080\nbind-address: \"*\"\nallow-lan: true" > /config.yaml;
         exec /clash -f config.yaml'
       )
  esac

  local extra_args2=()
  if [[ -n "$image_pull_secret" ]]
  then
    extra_args2+=(--overrides='{"spec":{"imagePullSecrets":[{"name":"'"${image_pull_secret}"'"}]}}')
  fi

  # Start proxy pod
  kubectl --context "$context" run \
    --namespace "$namespace" \
    --restart=Never \
    --port "$port" \
    --labels="$labels" \
    --image "$image" \
    "${extra_args1[@]}" \
    "$podname" \
    "${extra_args2[@]}"

  kubectl --context "$context" --namespace "$namespace" \
    wait --for=condition=Ready --timeout=60s pod "$podname" >/dev/null

  echo "Forwaring SOCKS5 Proxy to localhost:${port}..."
  echo
  echo "To delete the pod run the following command:"
  echo "$ kubectl --context \"${context}\" delete pod  -n \"${namespace}\" \"${podname}\""
  echo

  # Setup portforward
  kubectl --context "${context}" --namespace "${namespace}" \
    port-forward --address="${address}" "${podname}" "${port}:${podport}"
}

main() {
  local skip_pod_deletion restart
  local context namespace address port image podname podport

  while [[ $# -gt 0 ]]
  do
    case $1 in
      -h|--help)
        usage
        exit 0
        ;;
      --restart)
        restart=1
        shift
        ;;
      --skip-cleanup)
        skip_pod_deletion=1
        shift
        ;;
      -c|--ctx|--context)
        context="$2"
        shift 2
        ;;
      -n|--namespace)
        namespace="$2"
        shift 2
        ;;
      -a|-address)
        address="$2"
        shift 2
        ;;
      -p|--port)
        port="$2"
        shift 2
        ;;
      -P|--pod-port)
        podport="$2"
        shift 2
        ;;
      -N|--name)
        podname="$2"
        shift 2
        ;;
      -i|--image)
        image="$2"
        shift 2
        ;;
      -I|--image-pull-secret)
        image_pull_secret="$2"
        shift 2
        ;;
      *)
        usage >&2
        exit 2
      ;;
    esac
  done

  if ! command -v kubectl &>/dev/null
  then
    {
      echo "Error: missing kubectl command"
      echo "Please install kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/)"
    } >&2
    exit 1
  fi

  local DEFAULT_NAMESPACE
  DEFAULT_NAMESPACE=$(kubectl config view --minify --output 'jsonpath={..namespace}')

  context=${context:-$(kubectl config current-context)}
  namespace=${namespace:-${DEFAULT_NAMESPACE:-default}}
  address=${address:-${DEFAULT_ADDRESS}}
  port=${port:-${DEFAULT_PORT}}
  image=${image:-${DEFAULT_IMAGE}}
  image_pull_secret=${image_pull_secret:-${IMAGE_PULL_SECRET}}
  podname=${podname:-${DEFAULT_PODNAME}}

  echo "$(basename "$0") parameters:" >&2
  for param in context namespace address port podname image
  do
    echo "  - ${param}=\"${!param}\""
  done
  # context=\"${context}\" namespace=\"${namespace}\" address=\"${address}\" port=\"${port}\" name=\"${podname}\" image=\"${image}\""

  if [[ -n "$restart" ]]
  then
    while sleep 1
    do
      start_proxy_pod "${context}" "${namespace}" \
        "${address}" "${port}" \
        "${image}" "${image_pull_secret}" \
        "${podname}" "${podport}"
      echo "The proxy died. Restarting..." >&2
    done
  else
    start_proxy_pod "${context}" "${namespace}" \
      "${address}" "${port}" \
      "${image}" "${image_pull_secret}" \
      "${podname}" "${podport}"
  fi

  # Cleaning up SOCKS5 proxy server if needed
  if [[ -z "${skip_pod_deletion}" ]]
  then
    cleanup_proxy "${context}" "${namespace}" "${podname}"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  [[ -n "${DEBUG}${DEBOG}" ]] && set -x -e

  # Ensure $USER is set
  USER="${USER:-$(random_string 10)$(date '+%s')}"
  # shellcheck disable=2001
  DEFAULT_PODNAME=$(sed -e 's/[^[:alnum:]|-]//g' <<< "socks5-proxy-${USER:-$(date '+%s')}" | tr '[:upper:]' '[:lower:]')
  DEFAULT_PORT=1080
  DEFAULT_POD_PORT=1080
  DEFAULT_IMAGE=dreamacro/clash
  DEFAULT_ADDRESS=localhost
  IMAGE_PULL_SECRET="${IMAGE_PULL_SECRET:-}"

  main "$@"
fi
