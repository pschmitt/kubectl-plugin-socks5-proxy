#!/usr/bin/env bash
#
# A kubectl plugin that creates a local SOCKS5 proxy through which you can access to pods/services in a Kubernetes cluster
#

[[ -n "$DEBUG" ]] && set -x -e

# shellcheck disable=2001
DEFAULT_PODNAME=$(sed -e 's/[^[:alnum:]|-]//g' <<< "socks5-proxy-${USER:-$(date '+%s')}" | tr '[:upper:]' '[:lower:]')
DEFAULT_PORT=1080
DEFAULT_IMAGE=serjs/go-socks5-proxy

help(){
  echo "Usage: "
  echo "  kubectl socks5-proxy"
  echo ""
  options
}

options(){
  cat << EOF
Options:
  -c, --context <namespace>     Kubernetes context to create SOCKS5 proxy server in
                                Default: Current context

  -n, --namespace <namespace>   Namespace to create SOCKS5 proxy server in
                                Default: Current namespace (or default)

  -p, --port <local port>       Local port to be forwarded to the SOCKS5 proxy server (Pod)
                                A client connects to this port, then the connection is forwarded to the
                                SOCKS5 proxy server, which is then forwareded to the destination server
                                Default: ${DEFAULT_PORT}

  -N, --name <pod name>         Name to give the pod in the cluster
                                Default: ${DEFAULT_PODNAME}

  -i, --image <socks5 image>    Set the image used as SOCKS5 proxy server
                                Default: ${DEFAULT_IMAGE}

  --restart                     Automatically restart the proxy on failure
                                Default: SOCKS5 proxy only get started once

  --skip-cleanup                Skip cleanup of the SOCKS5 proxy pod
                                Default: Delete SOCKS5 proxy pod at the end

  -h, --help                    Show this message
EOF
}

cleanup_proxy(){
  local context="$1" namespace="$2" podname="$3"
  echo "Cleaning up SOCKS5 proxy server (Pod)..."
  kubectl --context "$context" delete pod "${podname}" --namespace "${namespace}"
}

run_proxy(){
  local context="$1"
  local namespace="$2"
  local port="$3"
  local image="$4"
  local podname="$5"

  echo "Creating SOCKS5 Proxy (Pod)..."

  # shellcheck disable=2064
  trap "kubectl --context '$context' delete pod -n '$namespace' '$podname' --wait=false >&2" EXIT
  kubectl --context "$context" run --namespace "$namespace" \
    --restart=Never --grace-period=1 --force=true \
    --port 1080 \
    --labels=owner="${USER}",purpose=debug \
    --image "$image" \
    "$podname"

  kubectl --context "$context" --namespace "$namespace" \
    wait --for=condition=Ready --timeout=60s "$podname" >/dev/null

  echo "Forwaring SOCKS5 Proxy to localhost:${port}..."
  echo
  echo "To delete the pod run the following command:"
  echo "$ \"kubectl --context \"${context}\" delete pod  -n \"${namespace}\" \"${podname}\"\""
  echo

  # Setup portforward
  kubectl --context "${context}" --namespace "${namespace}" port-forward "${podname}" "${port}:1080"
}

main() {
  local skip_pod_deletion restart
  local namespace port image podname context

  while [[ $# -gt 0 ]]
  do
    case $1 in
      -h|--help)
        help
        exit 0
        ;;
      --restart)
        restart=1
        shift
        ;;
      --skip-cleanup)
        skip_pod_deletion=1
        shift
        ;;
      -c|--ctx|--context)
        context="$2"
        shift 2
        ;;
      -n|--namespace)
        namespace="$2"
        shift 2
        ;;
      -p|--port)
        port="$2"
        shift 2
        ;;
      -N|--name)
        podname="$2"
        shift 2
        ;;
      -i|--image)
        image="$2"
        shift 2
        ;;
      *)
        help >&2
        exit 2
      ;;
    esac
  done

  if ! command -v kubectl &>/dev/null
  then
    {
      echo "Error: missing kubectl command"
      echo "Please install kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/)"
    } >&2
    exit 1
  fi

  local DEFAULT_NAMESPACE
  DEFAULT_NAMESPACE=$(kubectl config view --minify --output 'jsonpath={..namespace}')
  context=${context:-$(kubectl config current-context)}
  namespace=${namespace:-${DEFAULT_NAMESPACE:-default}}
  port=${port:-${DEFAULT_PORT}}
  image=${image:-${DEFAULT_IMAGE}}
  podname=${podname:-${DEFAULT_PODNAME}}

  echo "using: context=\"${context}\" namespace=\"${namespace}\" port=\"${port}\" name=\"${podname}\" image=\"${image}\""

  if [[ -n "$restart" ]]
  then
    while sleep 1
    do
      run_proxy "${context}" "${namespace}" "${port}" "${image}" "${podname}"
      echo "The proxy died. Restarting..." >&2
    done
  else
    run_proxy "${context}" "${namespace}" "${port}" "${image}" "${podname}"
  fi

  # Cleaning up SOCKS5 proxy server if needed
  if [[ -z "${skip_pod_deletion}" ]]
  then
    cleanup_proxy "${context}" "${namespace}" "${podname}"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  main "$@"
fi
